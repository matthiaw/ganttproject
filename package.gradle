/*
 * Open Source Software published under the Apache Licence, Version 2.0.
 */

import org.gradle.internal.os.OperatingSystem

ext {
    operatingSystem = OperatingSystem.current()

    javaPackagerPath = ""
    publishedVersion = "3.0.0"
    bundlerScript = file('build-bin/build-package.sh')
    extraBundlerArguments = []
    if (operatingSystem.isMacOsX()) {
//        packageType = 'pkg'
//        appIcon = file('icons/mac/Santulator.icns')
//        sessionIcon = file('icons/mac/SantulatorSession.icns')
//        extraBundlerArguments = ['--mac-sign']
    } else if (operatingSystem.isLinux()) {
        packageType = 'deb'
        appIcon = file('build-cfg/ganttproject.png')
        fileAssociations = file("build-cfg/file-associations.properties")
    } else if (operatingSystem.isWindows()) {
//        appIcon = file('icons/windows/Santulator.ico')
//        sessionIcon = file('icons/windows/SantulatorSession.ico')
//        bundlerScript = file('bin/build-package.bat')
//        generatedInnoSetupFile = file("${buildDir}/resources/main/application.iss")
//        windowsExecutable = file("${bundlePath}/Santulator/Santulator.exe")
//        bundleContent = file("${bundlePath}/Santulator/*")
//        // Locations for the DLL workaround (see https://github.com/Santulator/Santulator/issues/5)
//        windowsDllDirectory = file('C:\\Windows\\System32')
//        windowsDllMSVCP140 = file("${windowsDllDirectory}/MSVCP140.dll")
//        windowsDllVCRUNTIME140 = file("${windowsDllDirectory}/VCRUNTIME140.dll")
    }
}

task checkBundlingEnvironment {
    description 'Check the environment for building the installable bundle'
    doLast {
        def javaHome = System.env.JAVA_HOME

        if (operatingSystem.isWindows()) {
            if (javaHome) {
                def javaExecutable = file("${javaHome}/bin/java.exe")
                def packagerFile = file("${javaHome}/bin/jpackager.exe")
                def jmodFile = file("${javaHome}/jmods/jdk.packager.jar")

                if (!javaExecutable.exists()) {
                    throw new GradleException("Unable to find Java executable '${javaExecutable}'")
                }
                if (!packagerFile.exists()) {
                    throw new GradleException("Unable to find Java packager executable at '${packagerFile}'")
                }
                if (!jmodFile.exists()) {
                    throw new GradleException("Unable to find Java packager module at '${jmodFile}'")
                }
                // Check existence of files for DLL workaround (see https://github.com/Santulator/Santulator/issues/5)
                if (!windowsDllMSVCP140.exists() || !windowsDllVCRUNTIME140.exists()) {
                    throw new GradleException("Unable to find '${windowsDllMSVCP140}' and '${windowsDllVCRUNTIME140}' (see https://github.com/Santulator/Santulator/issues/5)")
                }
            } else {
                throw new GradleException("JAVA_HOME must be set")
            }
        } else {
            def packagerFile = null
            if (javaHome) {
                packagerFile = file("${javaHome}/bin/jpackager")
            } else {
                if (project.hasProperty('javaPackagerPath')) {
                    packagerFile = file("${javaPackagerPath}/jpackager")
                } else {
                    throw new GradleException("Use -PjavaPackagerPath=... to specify the directory containing the Java Packager")
                }
            }
            if (!packagerFile.exists() || !packagerFile.isFile()) {
                throw new GradleException("The Java Packager '$packagerFile' is missing")
            }
            javaPackagerPath = packagerFile.absolutePath

        }
    }
}

task createBundle(type: Exec, dependsOn: [checkBundlingEnvironment]) {
    description 'Build the installable bundle'
//    if (operatingSystem.isWindows()) {
//        commandLine 'cmd', '/c',
//                bundlerScript,
//                "${javafxModulePath}",
//                applicationLibraryPath,
//                bundlePath,
//                mainJar,
//                publishedVersion,
//                appIcon
//    } else {
    commandLine = ['sh',
                   bundlerScript,
                   "${-> file("${javaPackagerPath}")}",
                   packageType,
                   "ganttproject-builder/dist-bin",
                   "build/pkg",
                   publishedVersion,
                   fileAssociations,
                   appIcon,
                   *extraBundlerArguments]
//}
}



